---
- name: "Disable TTY sudo requirement for ssh pipelining"
  lineinfile: dest=/etc/sudoers regexp='^Defaults\s*requiretty' state=absent validate='visudo -cf %s'

- name: "More sudo w/o tty options"
  lineinfile: dest=/etc/sudoers regexp='Defaults\s*!visiblepw' state=absent validate='visudo -cf %s'

- name: "Disable the fastest mirror plugin to save time"
  lineinfile: dest=/etc/yum/pluginconf.d/fastestmirror.conf regexp='^enabled=' line='enabled=0'
  when: ansible_os_family == "RedHat"

- name: "Make sure required software is installed and up to date."
  yum: name={{ item }} state=latest
  with_items:
    - epel-release
    - nginx
    - git

- name: "NOTICE: STOPPING AND DISABLING THE IPTABLES FIREWALL!"
  service: name=iptables enabled=no state=stopped

- name: "Stop nginx if it is already running."
  service: name=nginx enabled=yes state=stopped

- name: "Check to see if the desired port is currently in use" 
  wait_for: port={{ portNumber }} state=stopped timeout=10
  register: portCheck
  ignore_errors: True

- fail: msg="Fail if the port you specified is in use by something other than NginX"
  when: portCheck.state!="stopped"

- name: "Check if conf.available exists and is a directory"
  stat: path=/etc/nginx/conf.available
  register: confAvailExists

- name: "Rename conf.d to conf.available"
  command: mv /etc/nginx/conf.d /etc/nginx/conf.available
  when: not confAvailExists.stat.isdir

- name: "Make sure your config file exists in conf.available"
  template: src=vhost.j2 dest=/etc/nginx/conf.available/{{ portNumber }}.conf owner=root group=root mode=0644

- name: "make sure that /etc/nginx/conf.d exists"
  file: state=directory path=/etc/nginx/conf.d owner=root group=root mode=0755

- name: "Delete any existing NginX config file links"
  file: state=absent
  with_fileglob: 
  - /etc/nginx/conf.d/*

- name: "link your file in to the conf.d"
  file: src=/etc/nginx/conf.available/{{ portNumber }}.conf path=/etc/nginx/conf.d/{{ portNumber }}.conf owner=root group=root mode=0644

# create webroot

- name: "Ensure existance of /var/www/{{ portNumber }}"
  file: name=/var/www/{{ portNumber }} state=directory
  #todo: set appropriate permissions, make port number a variable

- name: "ensure update web content from github"
  git: repo={{ gitRepo }} dest=/var/www/{{ portNumber }} update=yes
